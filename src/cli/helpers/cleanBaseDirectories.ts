/* eslint-disable @typescript-eslint/ban-ts-comment */
import path from 'path';
import process from 'process';

import { rimraf } from 'rimraf';

export async function cleanBackendBaseDirectories(answers = {}) {
  // @ts-ignore
  const { forceOverwrite = false } = answers;

  const directories = ['backend/src/_base'];

  if (forceOverwrite) {
    /* TODO: implement this after we properly structured Backend into:
    - Boilerplate:  standard for ALL applications (may be customizable);
    - Base:         generated by Flystart (may not be modified)
    - Entities:     imports from Base, allows extending of Entities from Base
    - Custom:       code which is entirely outside of the scope of Flystart (may make use of Entities, but not directly from Base)
    */
    // directories.push(...['backend/src/entities']);
  }

  return cleanBaseDirectories(directories, answers);
}

export async function cleanFrontendBaseDirectories(answers = {}) {
  // @ts-ignore
  const { forceOverwrite = false } = answers;

  const directories = ['frontend/src/_base'];

  if (forceOverwrite) {
    directories.push(...['frontend/src/entities']);
  }

  return cleanBaseDirectories(directories, answers);
}

function cleanBaseDirectories(directories, answers = {}) {
  const projectDir = process.cwd();

  const promises = directories.map((directory) => {
    const totalPath = path.join(projectDir, directory);

    return rimraf(totalPath, {
      filter: async (filePath) => {
        const entityName = filePath.replace(totalPath + path.sep, '').split(path.sep)[0];

        // @ts-expect-error
        if (Array.isArray(answers.exclude) && entityName && answers.exclude.includes(entityName)) {
          return false;
        }

        // @ts-ignore
        if (Array.isArray(answers.include) && entityName) {
          // @ts-ignore
          return answers.include.includes(entityName);
        }

        return true;
      },
    });
  });

  return Promise.all(promises);
}
